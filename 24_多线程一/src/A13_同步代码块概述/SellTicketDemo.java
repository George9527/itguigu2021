package A13_同步代码块概述;

/*
    ### 同步代码块解决数据安全问题

- 安全问题出现的条件
      - 是多线程环境
      - 有共享数据
      - 有多条语句操作共享数据

- 如何解决多线程安全问题呢?
      - 基本思想：让程序没有安全问题的环境

      同步代码块的执行原理 : 关键点就是对象锁
        - 线程执行到同步,判断锁是否存在
          - 如果锁存在,获取到锁,进入到同步中执行
          - 执行完毕,线程出去同步代码块,讲锁对象归还
        - 线程执行到同步,判断锁所否存在
          - 如果锁不存在,线程只能在同步代码块这里等待,锁的到来

- 怎么实现呢?
      - 把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可
      - Java提供了同步代码块的方式来解决

- 同步代码块格式：
        synchronized(任意对象) {
        多条语句操作共享数据的代码
       }

- synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁

- 同步的好处和弊端
  - 好处：解决了多线程的数据安全问题
  - 弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率
  使用同步 : 线程要先判断锁,然后获取锁,出去同步要释放锁, 增加了许多步骤,因此线程安全运行速度慢. 牺牲性能,不能牺牲数据安全

 */
public class SellTicketDemo {
    public static void main(String[] args) {
        SellTicket st = new SellTicket();

        Thread t1 = new Thread(st, "窗口1");
        Thread t2 = new Thread(st, "窗口2");
        Thread t3 = new Thread(st, "窗口3");

        t1.start();
        t2.start();
        t3.start();
    }
}
